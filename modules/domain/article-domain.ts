/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/articles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Articles
     * @description Get Articles
     */
    get: operations["ArticleService_GetArticles"];
    put?: never;
    /**
     * Create Article
     * @description Create Article
     */
    post: operations["ArticleService_CreateArticle"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/articles/{articleId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Article by Id
     * @description Get Article by Id
     */
    get: operations["ArticleService_GetArticleById"];
    /**
     * Update Article by Id
     * @description Update Article by Id
     */
    put: operations["ArticleService_UpdateArticleById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    v1ErrorResponse: {
      error?: string;
    };
    v1MetaResponse: {
      /** Format: int32 */
      total?: number;
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      limit?: number;
    };
    categoryData: {
      id?: string;
      name?: string;
      userId?: string;
    };
    userData: {
      id?: string;
      username?: string;
      role?: string;
    };
    articleData: {
      id?: string;
      title?: string;
      content?: string;
      userId?: string;
      categoryId?: string;
      category?: components["schemas"]["categoryData"];
      user?: components["schemas"]["userData"];
      createdAt?: string;
      updatedAt?: string;
    };
    articlePayload: {
      title?: string;
      content?: string;
      categoryId?: string;
    };
    articlesResponse: {
      data?: components["schemas"]["articleData"][];
      /** Format: int32 */
      total?: number;
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      limit?: number;
    };
    articleResponse: components["schemas"]["articleData"];
    createArticleResponse: components["schemas"]["articleData"];
    updateArticleResponse: components["schemas"]["articleData"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  ArticleService_GetArticles: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["articlesResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  ArticleService_CreateArticle: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["articlePayload"];
      };
    };
    responses: {
      /** @description OK */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["createArticleResponse"];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  ArticleService_GetArticleById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["articleResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  ArticleService_UpdateArticleById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["articlePayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["updateArticleResponse"];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
}

export type V1ErrorResponse = components["schemas"]["v1ErrorResponse"];
export type ArticlesResponse = components["schemas"]["articlesResponse"];
export type ArticleResponse = components["schemas"]["articleResponse"];
export type CreateArticleResponse =
  components["schemas"]["createArticleResponse"];
export type UpdateArticleResponse =
  components["schemas"]["updateArticleResponse"];

export type ArticleData = components["schemas"]["articleData"];

export type ArticlePayload = components["schemas"]["articlePayload"];

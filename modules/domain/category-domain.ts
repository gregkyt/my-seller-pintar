/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/categoriess": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Categories
     * @description Get Categories
     */
    get: operations["CategoriesService_GetCategories"];
    put?: never;
    /**
     * Create Categories
     * @description Create Categories
     */
    post: operations["CategoriesService_CreateCategories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/categoriess/{categoriesId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Categories by Id
     * @description Get Categories by Id
     */
    get: operations["CategoriesService_GetCategoriesById"];
    /**
     * Update Categories by Id
     * @description Update Categories by Id
     */
    put: operations["CategoriesService_UpdateCategoriesById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    v1ErrorResponse: {
      /** Format: int32 */
      statusCode?: number;
      message?: string;
    };
    categoryData: {
      id?: string;
      name?: string;
      userId?: string;
      createdAt?: string;
      updatedAt?: string;
    };
    categoryPayload: {
      name?: string;
    };
    categoriesResponse: {
      data?: components["schemas"]["categoryData"][];
      /** Format: int32 */
      totalData?: number;
      /** Format: int32 */
      currentPage?: number;
      /** Format: int32 */
      totalPages?: number;
    };
    categoryResponse: components["schemas"]["categoryData"];
    createCategoryResponse: components["schemas"]["categoryData"];
    updateCategoryResponse: components["schemas"]["categoryData"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  CategoriesService_GetCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["categoriesResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  CategoriesService_CreateCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["categoryPayload"];
      };
    };
    responses: {
      /** @description OK */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["createCategoryResponse"];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  CategoriesService_GetCategoriesById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoriesId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["categoryResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  CategoriesService_UpdateCategoriesById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoriesId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["categoryPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["updateCategoryResponse"];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
}

export type V1ErrorResponse = components["schemas"]["v1ErrorResponse"];
export type CategoriesResponse = components["schemas"]["categoriesResponse"];
export type CategoryResponse = components["schemas"]["categoryResponse"];
export type CreateCategoryResponse =
  components["schemas"]["createCategoryResponse"];
export type UpdateCategoryResponse =
  components["schemas"]["updateCategoryResponse"];

export type CategoryData = components["schemas"]["categoryData"];

export type CategoryPayload = components["schemas"]["categoryPayload"];
